name: Build and Deploy Expense Tracker to AKS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}
  AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
  RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Build and push Docker image
      run: |
        az acr login --name $ACR_NAME
        docker build -t $ACR_NAME.azurecr.io/expense-tracker:${{ github.sha }} .
        docker push $ACR_NAME.azurecr.io/expense-tracker:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set AKS context
      run: |
        az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_CLUSTER_NAME

    - name: Update deployment image
      run: |
        sed -i 's|<registry-name>|$ACR_NAME|g' deployment.yaml
        sed -i 's|v1|${{ github.sha }}|g' deployment.yaml
        kubectl apply -f pvc.yaml
        kubectl apply -f deployment.yaml
        kubectl apply -f service.yaml

    - name: Get service URL
      run: |
        echo "Waiting for LoadBalancer IP..."
        for i in {1..30}; do
          EXTERNAL_IP=$(kubectl get svc expense-tracker-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
          if [ ! -z "$EXTERNAL_IP" ]; then
            echo "Live website URL: http://$EXTERNAL_IP"
            echo "LIVE_URL=http://$EXTERNAL_IP" >> $GITHUB_ENV
            break
          fi
          echo "Waiting for external IP... ($i/30)"
          sleep 10
        done

    - name: Comment on PR with live URL
      if: env.LIVE_URL
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ **Expense Tracker Deployment Complete!**\n\n**Live Website:** ${process.env.LIVE_URL}\n\n**Local Testing:** http://localhost:5000 (when running Docker locally)\n\n**Features:**\n- Add/view/delete expenses\n- Category-wise spending\n- SQLite database persistence\n- Responsive web interface`
          })